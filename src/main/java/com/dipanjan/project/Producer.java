package com.dipanjan.project;


import java.util.Optional;
import java.util.Properties;

import org.apache.kafka.clients.producer.Callback;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.apache.kafka.common.Metric;
import org.apache.kafka.common.MetricName;
import org.apache.kafka.common.serialization.StringSerializer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Producer implements Runnable {

    private static final Logger logger = LoggerFactory.getLogger(Producer.class.getName());
    private final String msgCount;
    private final KafkaProducer kProducer;

    /**
     * @param msgCount - configurable number of messages to be generated by producer
     */

    public Producer(Optional<String> msgCount) {

        this.msgCount = msgCount.get().isEmpty() ? ProducerConsumerConfig.getDefaultMsgCount() : msgCount.get();
        // kafka producer instance with properties I like to set
        kProducer = new KafkaProducer<String, String>(getProducerProperties());
    }

    /**
     * @return kafka producer properties
     */
    private Properties getProducerProperties() {
        Properties properties = new Properties();
        properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, ProducerConsumerConfig.getBootStrapServer());
        properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        properties.setProperty(ProducerConfig.ACKS_CONFIG, ProducerConsumerConfig.getWriteAcknowledge());

        return properties;
    }

    @Override
    public void run() {
        // records to be sent
        for (int loopCounter = 0; loopCounter < Integer.parseInt(msgCount); loopCounter++) {

            String genaratedMessage = Utils.generateRandomString();
            String msgKey = "key_" + genaratedMessage;
            String msgValue = "value_" + genaratedMessage;
            ProducerRecord<String, String> msgRecord =
                    new ProducerRecord<String, String>(ProducerConsumerConfig.getTopicName(), msgKey, msgValue);

            // send the record
            int finalLoopCounter = loopCounter;
            kProducer.send(msgRecord, new Callback() {
                @Override
                public void onCompletion(RecordMetadata recordMetadata, Exception e) {

                    if (e == null) {
                        logger.info("New Data pushed to " + " Topic" + recordMetadata.topic() + " to partition" + recordMetadata
                                .partition() + " _msg number" + finalLoopCounter);
                    } else {
                        // TODO: handle the exception (maybe push to a error topic)
                    }
                }
            });
        }
        // see if you are able to pull metrics from the producer
        // need to  decide which to report for the progress monitor
        kProducer.metrics().forEach((key, value) -> {
            MetricName metricName = (MetricName) key;
            logger.info("Producer Metric Name --->" + metricName.name());

            Metric metricValue = (Metric) value;
            logger.info("Producer Metric Value --->" + metricValue.metricValue());
        });
        //flush and close
        kProducer.flush();
        kProducer.close();
    }

}
